@startuml
'https://plantuml.com/class-diagram

/'
    INFO     Instansvariabler:
            1) private instansvariabler skal starte med liten bokstav + camelCase
            2) public instansvariabler (properties) skal starte med Stor bokstav + PascalCase
'/

class Project {
    - string projectName
    - NamingStandard namingStandard
    - Resource[] resources
    - string projectPath
    - Void applyNamingStandard()
    - Void saveProject(String path)
}

interface IGenerator {
    // TODO Fill in
}

class NamingStandard {
    - string[] Order
    - char Seperator
    - string GenerateResourceName(string appName, string env,
          string location, string resourceType, string index)

}

class TerraformExecutor{
    - TerraformResult Plan(Project project)
    - TerraformResult Apply(Project project)
    - TerraformResult Destroy(Project project)
}

interface ITerraformController{
    +POST /init
    +POST /generate
    +POST /apply
    +POST /validate
    ' TODO: vurdere å ha med +POST /plan og +POST /init
}

class TerraformController implements ITerraformController{
    - TerraformResult initiate()
    - TerraformResult generate()
    - TerraformResult apply()
    - TerraformResult validate()
    /' TODO: vurdere om vi skal kjøre kommandoene i applikasjonen eller i temporaryFiles.
          må vurderes etter vi finner ut hvordan vi håndterer State-filer '/
}

' TODO: lag en TerraformController klasse her (da vi kun har interface nå)____

class TerraformResult{
    - bool isSuccessful
    - Dictionary<errorCode, errorMessage> resultMessage
}

class AzureResourceManager{
    - bool CheckSubscription(string UserSession)

}

class AzureAuthService{
   - void Login(string UserSession)
   - void RefreshToken(string UserSession)
}


/' TODO:     Dobbeltsjekke at dette er riktig.
            Skal det egentlig være en klasse eller er interface greit?
'/
interface IAuthController{
    + POST /login
}

class AuthController implements IAuthController{
    + void AzureLogin()
}

class UserSession{
    - string tenantId
    - string subscriptionId
    - string ResourceGroup
}


class Logger{
    - string LoggerPath
    + void LogInfo(string info)
    + void LogError(string error, Exception exception)
}

class Resource{
    - string resourceName
    - Module[] modules
}

class Module{
    - string moduleName
    - Dictionary<string, string> files
    - Dictionary<string, string> variables
}

class ProjectManager implements IGenerator{
    + void AddResource(Resource resource)
    + void RemoveResource(Resource resource)
}

class ResourceManager{
    - Modules[] modules
    + void AddModule()
    + void RemoveModule()
    + Resource CreateResource()
}

' Kun for KI-versjonen '
class LLMService implements IGenerator{
    + ValidationResult AnalyzeTerraform(Project project)
    + string AutoGenerateTerraform(string prompt)
}

class OpenAiService{
    + string SendRequestToAPI(string request)
}

' TODO: gi navn på stringene i parameteret
' skal konvertere svar fra LLM til fungerende modul/ressurs
class TerraformFactory{
    + Resource ConvertResponse(string string, string string)
}

class ValidationResult{
    - boolean isValid
    - string suggestions
}

exception       InvalidNamingStandardException
exception       InvalidSeparatorException
exception       TerraformExecutionException
exception       AzureAuthenticationException

'    TODO: skriv KOBLINGER mellom klasser/exceptions/interface under her ____
Project                     -->    Resource                         :   Contains resource
Project                     -->    NamingStandard                   :   Uses
Resource                    -->    Module                           :   Contains modules
Resource                    ..>    ProjectManager                   :   Adds resource to project
ResourceManager             -->    Module
ResourceManager             -->    Resource                         :   Validates
' Dobbeltsjekke kobling under ?
NamingStandard              ..>     Project                         :   Applies Standard
Project                     ..>     TerraformExecutor               :   Executes
TerraformExecutor           ..>     TerraformResult                 :   Produces
UserSession                 -->     AzureAuthService                :   Logs in with
AuthController              -->     AzureAuthService                :   Authenticates
AzureAuthService            -->     AzureResourceManager            :   Grants access
AzureResourceManager        ..>     Project                         :   Checks
NamingStandard              ..>     InvalidNamingStandardException  :   Throws/Catches Exception
NamingStandard              ..>     InvalidSeparatorException       :   Throws/Catches Exception
TerraformExecutor           ..>     TerraformExecutionException     :   Throws/Catches Exception

' TODO: Dobbeltsjekke alt under denne linjen
TerraformController         ..>     Project                         :   Calls
UserSession                 ..>     Project                         :   Defines
'Under er kun for LLM-versjon
Project                     -->     LLMService                      :   Validates
LLMService                  -->     TerraformFactory                :   Creates module
LLMService                  -->     OpenAiService                   :   Calls API
OpenAiService               -->     ValidationResult                :   Returns
LLMService                  -->     ValidationResult                :   Returns


@enduml